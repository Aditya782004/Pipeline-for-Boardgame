pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        // Define your ArgoCD credentials and repository details
        ARGOCD_SERVER_URL = "localhost:8082"    // e.g., https://argo-cd.example.com
        REPO_URL = "https://github.com/Aditya782004/Boardgame.git"
        GIT_USERNAME = "Aditya782004"
        GIT_TOKEN = credentials('git_cred')  // Jenkins credentials with the Git token
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git_cred', url: 'https://github.com/Aditya782004/Boardgame.git'
            }
        }
         stage('Compile') {
            steps {
                sh "mvn compile"
            }
         }    
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
         stage('File System Scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
         stage('Sonarqube Analysis') {
            steps {
               withSonarQubeEnv('sonar') {
                 sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Boardgame -Dsonar.ProjectKey=Boardgame \
                         -Dsonar.java.binaries=. '''
               }
            }
        }
         stage('Quality Gates') {
            steps {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
         stage('build') {
            steps {
                sh "mvn package"
            }
        }
         stage('Publish Artifact to Nexus') {
            steps {
                 withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
        stage('build and tag docker image') {
            steps {
               script {
                    def commitHash = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    env.DOCKER_TAG = "aditya198/board_game:${commitHash}"
                    
                      // Log in to Docker Hub using the credentials
                      withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                      // Docker login step
                       sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                       sh "docker build -t ${env.DOCKER_TAG} ."
                     }
               } 
            }
        }
        stage('Docker image scan') {
            steps {
                sh "trivy clean --java-db"
                sh "trivy image --timeout 5m --format table -o trivy-image-report.html ${env.DOCKER_TAG} "
            }
        }
        stage('Push Docker image') {
            steps {
                sh "docker push ${env.DOCKER_TAG}"
            }
        }
        stage('Update Kubernetes Deployment with New Image') {
            steps {
                script {
                    // Replace the image in the deployment YAML (deployment-service.yaml) with the new docker tag
                    sh """
                      sed -i 's|adijaiswal/boardshack:latest|$DOCKER_TAG|g' deployment-service.yaml
                    """

                }
            }
        }
        stage('Commit Changes to Git') {
            steps {
                script {
                // Set Git credentials using Jenkins credentials
                withCredentials([usernamePassword(credentialsId: 'git_cred', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
                // Configure Git to use the token for authentication
                sh """
                git config --global credential.helper store
                echo "https://${GIT_USERNAME}:${GIT_TOKEN}@github.com" > ~/.git-credentials
                """
                
                // Ensure the workspace is clean and unstaged changes are reset
                sh 'git reset'
                
                // Add all files, including untracked ones
                sh 'git add -A'
                
                // Commit the changes with a message
                sh "git commit -m 'Update Kubernetes deployment with new image tag: ${env.DOCKER_TAG}'"
                
                // Set the remote URL (GitHub) without exposing the token directly
                sh 'git remote set-url origin https://github.com/Aditya782004/Boardgame.git'
                
                // Push the changes back to GitHub
                sh 'git push origin main'
                
                // Optionally remove the stored credentials file for security
                sh 'rm -f ~/.git-credentials'
                 }
            }
        }
    }
           
           
        stage('Login to ArgoCD') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'argocd-creds', usernameVariable: 'ARGOCD_USER', passwordVariable: 'ARGOCD_PASSWORD')]) {
                         sh """
                         argocd login ${ARGOCD_SERVER_URL} --username \$ARGOCD_USER --password \$ARGOCD_PASSWORD --insecure
                         """
                    }
                }
            }
        }
        
        stage('Add Private Git Repository') {
            steps {
                script {
                // Use withCredentials to securely inject Git credentials
                withCredentials([usernamePassword(credentialsId: 'git_cred', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_TOKEN')]) {
                // Add the private Git repository to ArgoCD using Git username and token
                sh """
                argocd repo add $REPO_URL --username \$GIT_USERNAME --password \$GIT_TOKEN
                """
                }
            }
        }
        
        stage('Deploy Application') {
            steps {
                script {
                    // Example of creating an application in ArgoCD if it doesn't exist
                    def appExists = sh(script: "argocd app list | grep board-game-deploy", returnStatus: true)

                    // If the application doesn't exist, create it
                    if (appExists != 0) {
                        sh """
                        argocd app create board-game-deploy \
                        --repo $REPO_URL \
                        --path . \
                        --dest-server https://kubernetes.default.svc \
                        --dest-namespace boardgame \
                        --sync-policy automated
                        """
                    }
                    // Sync the application in ArgoCD
                    sh "argocd app sync board-game-deploy"
                }
            }
        }
    }
}
